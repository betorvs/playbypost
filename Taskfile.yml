version: "3"

env:
  ENV: testing

dotenv: [".env.task", "{{.ENV}}/.env.task", "{{.HOME}}/.env.task"]

tasks:
  greet:
    cmds:
      - echo "Using database $PGDATABASE and postgres $PGHOST"

  tidy:
    cmds:
      - go get -u -v ./...
      - go mod tidy

  test:
    cmd: 
      - golangci-lint run
      - go test -v ./...

  stop_postgres:
    cmds:
      - docker stop postgres

  start_postgres:
    cmds:
      - docker start postgres

  create_postgres:
    cmds:
      - docker run -p 5432:5432 --name postgres -e "POSTGRES_PASSWORD=$PGPASSWORD" -d postgres

  migrate_up:
    cmds:
      - ./admin-ctl db create
      - ./admin-ctl db up

  migrate_down:
    cmds:
      - ./admin-ctl db down

  build:
    cmds:
      - go build -ldflags "-X main.Version={{.GIT_COMMIT}}" -o playbypost app/server/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/admin-ctl/cmd.Version={{.GIT_COMMIT}}" -o admin-ctl app/admin-ctl/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/play/cmd.Version={{.GIT_COMMIT}}" -o play app/play/main.go
    vars:
      GIT_COMMIT:
        sh: git log -n 1 --format=%h || echo "dev01"

  build_local:
    cmds:
      - echo "Running version {{.VERSION}}"
      - go build -ldflags "-X main.Version={{.VERSION}}" -o playbypost app/server/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/admin-ctl/cmd.Version={{.VERSION}}" -o admin-ctl app/admin-ctl/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/play/cmd.Version={{.VERSION}}" -o play app/play/main.go
      - go build -ldflags "-X main.Version={{.VERSION}}" -o slack-plugin app/plugins/slack/main.go
    vars:
      VERSION:
        sh: openssl rand -hex 4

  build_assets:
    cmds:
      - cd ui && npm run build

  dev:
    cmds:
      - tilt up

  dev_remote:
    cmds:
      - tilt up --host $REMOTE_IP_ADDRESS
    env:
      REMOTE_IP_ADDRESS: "192.168.1.210"

  dev_down:
    cmds:
      - tilt down

  list_users:
    cmds:
      - ./admin-ctl users list --token {{.TOKEN}}
    vars:
      TOKEN:
        sh: cat creds

  list_stories:
    cmds:
      - ./admin-ctl stories list --token {{.TOKEN}}
    vars:
      TOKEN:
        sh: cat creds

  list_encounters:
    cmds:
      - ./admin-ctl encounter list --token {{.TOKEN}}
    vars:
      TOKEN:
        sh: cat creds

  load_writer:
    cmds:
      - for i in $(seq 1 5); do ./admin-ctl writer create -u roberto${i} --password r123qwe --token {{.TOKEN}}; done
    vars:
      TOKEN:
        sh: cat creds

  load_stories:
    cmds:
      - for i in $(seq 1 5); do ./admin-ctl story create --token {{.TOKEN}} --master-id ${i} -t "tale from ${i} years ago" -n "test story ${i}" -a "${i} years ago, a group of heroes will starting facing their biggest challenge..."; done
      - for i in $(seq 1 5); do ./admin-ctl story create --token {{.TOKEN}} --master-id ${i} -t "new tale from songs ${i} " -n "second test story ${i}" -a "many things happened and ..."; done
    vars:
      TOKEN:
        sh: cat creds

  load_players:
    cmds:
      - for i in 1 6; do for p in $(seq 1 5); do if [ "${p}" = "1" ]; then continue; fi ; ./admin-ctl player generate --name "bob ${p}bor${i}" --player-id ${p} --story-id ${i} --token {{.TOKEN}} ; done ; done
      - for i in 2 7; do for p in $(seq 1 5); do if [ "${p}" = "2" ]; then continue; fi ; ./admin-ctl player generate --name "bob ${p}bor${i}" --player-id ${p} --story-id ${i} --token {{.TOKEN}} ; done ; done
      - for i in 3 8; do for p in $(seq 1 5); do if [ "${p}" = "3" ]; then continue; fi ; ./admin-ctl player generate --name "bob ${p}bor${i}" --player-id ${p} --story-id ${i} --token {{.TOKEN}} ; done ; done
      - for i in 4 9; do for p in $(seq 1 5); do if [ "${p}" = "4" ]; then continue; fi ; ./admin-ctl player generate --name "bob ${p}bor${i}" --player-id ${p} --story-id ${i} --token {{.TOKEN}} ; done ; done
      - for i in 5 10; do for p in $(seq 1 5); do if [ "${p}" = "5" ]; then continue; fi ; ./admin-ctl player generate --name "bob ${p}bor${i}" --player-id ${p} --story-id ${i} --token {{.TOKEN}} ; done ; done
    vars:
      TOKEN:
        sh: cat creds

  load_encounters:
    cmds:
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 1 --master-id 1 --title "${i} encounter on story 1" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 2 --master-id 2 --title "${i} encounter on story 2" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 3 --master-id 3 --title "${i} encounter on story 3" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 4 --master-id 4 --title "${i} encounter on story 4" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 5 --master-id 5 --title "${i} encounter on story 5" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 6 --master-id 1 --title "${i} encounter on story 6" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 7 --master-id 2 --title "${i} encounter on story 7" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 8 --master-id 3 --title "${i} encounter on story 8" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 9 --master-id 4 --title "${i} encounter on story 9" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 10 --master-id 5 --title "${i} encounter on story 10" --display-text "enc-${i}" --announcement "${i} ready players" --notes "secret note from roberto${i}" --token {{.TOKEN}} ; done
    vars:
      TOKEN:
        sh: cat creds

  load_players_encounters:
    cmds:
      - e=1 ; for i in $(seq 1 10); do for p in $(seq 1 5); do if [ "${p}" = "1" ]; then continue; fi ; ./admin-ctl encounter add --encounter-id ${e} --players-id $p --story-id $i --token {{.TOKEN}} ; done ; e=$((e+3)) ; done
    vars:
      TOKEN:
        sh: cat creds

  # initiative: ./admin-ctl initiative --encounter-id 1 --name "1-initiative" --token {{.TOKEN}}

  load:
    cmds:
      - task: load_storytellers
      - task: load_stories
      - task: load_players
      - task: load_encounters
      - task: load_players_encounters
