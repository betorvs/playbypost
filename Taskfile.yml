version: "3"

env:
  ENV: testing

dotenv: [".env.task", "{{.ENV}}/.env.task", "{{.HOME}}/.env.task"]

tasks:
  greet:
    cmds:
      - echo "Using database $PGDATABASE and postgres $PGHOST"

  tidy:
    cmds:
      - go get -u -v ./...
      - go mod tidy

  test:
    cmds: 
      - golangci-lint run
      - go test -v ./...

  stop_postgres:
    cmds:
      - docker stop postgres

  start_postgres:
    cmds:
      - docker start postgres

  create_postgres:
    cmds:
      - docker run -p 5432:5432 --name postgres -e "POSTGRES_PASSWORD=$PGPASSWORD" -d postgres

  migrate_up:
    cmds:
      - ./admin-ctl db create
      - ./admin-ctl db up

  migrate_down:
    cmds:
      - ./admin-ctl db down

  build:
    cmds:
      - go build -ldflags "-X main.Version={{.GIT_COMMIT}}" -o playbypost app/server/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/admin-ctl/cmd.Version={{.GIT_COMMIT}}" -o admin-ctl app/admin-ctl/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/play/cmd.Version={{.GIT_COMMIT}}" -o play app/play/main.go
    vars:
      GIT_COMMIT:
        sh: git log -n 1 --format=%h || echo "dev01"

  build_local:
    cmds:
      - echo "Running version {{.VERSION}}"
      - go build -ldflags "-X main.Version={{.VERSION}}" -o playbypost app/server/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/admin-ctl/cmd.Version={{.VERSION}}" -o admin-ctl app/admin-ctl/main.go
      - go build -ldflags "-X github.com/betorvs/playbypost/app/play/cmd.Version={{.VERSION}}" -o play app/play/main.go
      - go build -ldflags "-X main.Version={{.VERSION}}" -o slack-plugin app/plugins/slack/main.go
      - go build -ldflags "-X main.Version={{.VERSION}}" -o discord-plugin app/plugins/discord/main.go
    vars:
      VERSION:
        sh: openssl rand -hex 4

  build_assets:
    cmds:
      - cd ui && npm run build

  dev:
    cmds:
      - tilt up

  dev_remote:
    cmds:
      - tilt up --host $REMOTE_IP_ADDRESS
    env:
      REMOTE_IP_ADDRESS: "192.168.1.210"

  dev_down:
    cmds:
      - tilt down

  list_writers:
    cmds:
      - ./admin-ctl writer list --token {{.TOKEN}}
    vars:
      TOKEN:
        sh: cat creds

  list_stories:
    cmds:
      - ./admin-ctl stories list --token {{.TOKEN}}
    vars:
      TOKEN:
        sh: cat creds

  list_encounters:
    cmds:
      - ./admin-ctl encounter list --token {{.TOKEN}}
    vars:
      TOKEN:
        sh: cat creds

  load_writer:
    cmds:
      - for i in $(seq 1 2); do ./admin-ctl writer create -u roberto${i} --password r123qwe --token {{.TOKEN}}; done
    vars:
      TOKEN:
        sh: cat creds

  load_stories:
    cmds:
      - ./admin-ctl story create --token {{.TOKEN}} --writer-id 1 -t "heroes save the world" -n "test story 1" -a "years ago, a group of heroes will starting facing their biggest challenge..."
      - ./admin-ctl story create --token {{.TOKEN}} --writer-id 2 -t "dangerous world" -n "second test story 2" -a "in a dangerous place, an ancient evil reborn..."
    vars:
      TOKEN:
        sh: cat creds

  load_encounters:
    cmds:
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 1 --writer-id 1 --title "${i} encounter on story 1" --display-text "test-1-enc-${i}" --announcement "test ${i} ready players" --notes "secret note from roberto1" --token {{.TOKEN}} ; done
      - for i in $(seq 1 3); do ./admin-ctl encounter create --story-id 2 --writer-id 2 --title "${i} encounter on story 2" --display-text "test-2-enc-${i}" --announcement "test ${i} ready players" --notes "secret note from roberto2" --token {{.TOKEN}} ; done
    vars:
      TOKEN:
        sh: cat creds

  load_tasks:
    cmds:
      - ./admin-ctl task create --description "investigate crime scene" --ability wits --skill investigation --kind 2 --target 2 --token {{.TOKEN}}
    vars:
      TOKEN:
        sh: cat creds

  load:
    cmds:
      - task: load_storytellers
      - task: load_stories
      - task: load_encounters
